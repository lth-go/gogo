package main;

import "utils";

var globalArray []int = []int{100, 200, 300, 400};
var emptyArray []int = []int{};
var emptyMap map[string]int = map[string]int{};
var globalMap map[string]int = map[string]int{"test": 1};
var globalInterface interface{} = "cool";

//
// Check lexical analyzer
//
func testLex() {
    printf("Hello, World!\n\\n");
    printf("gogo\n"); // comment
    // chain string
    printf("%s %s", "gogo", " can run ok\n");
};

//
// Check operators
//
func testOperators() {
    printf("%s%v\n", "3 + 5..", (3 + 5));
    printf("%s%v\n", "3 - 5..", (3 - 5));
    printf("%s%v\n", "3 + -5..", (3 + -5));
    printf("%s%v\n", "3 * 5..", (3 * 5));
    printf("%s%v\n", "3 / 5..", (3 / 5));
    printf("%s%v\n", "3.0 + 5.0..", (3.0 + 5.0));
    printf("%s%v\n", "3.0 - 5.0..", (3.0 - 5.0));
    printf("%s%v\n", "3.0 + -5.0..", (3.0 + -5.0));
    printf("%s%v\n", "3.0 * 5.0..", (3.0 * 5.0));
    printf("%s%v\n", "3.0 / 5.0..", (3.0 / 5.0));
    printf("%s%v\n", "3 + 5.0..", (3 + 5.0));
    printf("%s%v\n", "3 - 5.0..", (3 - 5.0));
    printf("%s%v\n", "3 + -5.0..", (3 + -5.0));
    printf("%s%v\n", "3 * 5.0..", (3 * 5.0));
    printf("%s%v\n", "3 / 5.0..", (3 / 5.0));
    printf("%s%v\n", "3.0 + 5..", (3.0 + 5));
    printf("%s%v\n", "3.0 - 5..", (3.0 - 5));
    printf("%s%v\n", "3.0 + -5..", (3.0 + -5));
    printf("%s%v\n", "3.0 * 5..", (3.0 * 5));
    printf("%s%v\n", "3.0 / 5..", (3.0 / 5));

    var intVal int;
    var floatVal float;

    intVal = 3;

    printf("%s%v\n", "3 + 5..", (intVal + 5));
    printf("%s%v\n", "3 - 5..", (intVal - 5));
    printf("%s%v\n", "3 + -5..", (intVal + -5));
    printf("%s%v\n", "3 * 5..", (intVal * 5));
    printf("%s%v\n", "3 / 5..", (intVal / 5));

    intVal = 10;
    floatVal = 3.0;

    printf("%s%v\n", "3.0 + 5.0..", (floatVal + 5.0));
    printf("%s%v\n", "3.0 - 5.0..", (floatVal - 5.0));
    printf("%s%v\n", "3.0 + -5.0..", (floatVal + -5.0));
    printf("%s%v\n", "3.0 * 5.0..", (floatVal * 5.0));
    printf("%s%v\n", "3.0 / 5.0..", (floatVal / 5.0));

    floatVal = 10;
    intVal = 3;

    printf("%s%v\n", "3 + 5.0..", (intVal + 5.0));
    printf("%s%v\n", "3 - 5.0..", (intVal - 5.0));
    printf("%s%v\n", "3 + -5.0..", (intVal + -5.0));
    printf("%s%v\n", "3 * 5.0..", (intVal * 5.0));
    printf("%s%v\n", "3 / 5.0..", (intVal / 5.0));

    intVal = 10;
    floatVal = 3.0;

    printf("%s%v\n", "3.0 + 5..", (floatVal + 5));
    printf("%s%v\n", "3.0 - 5..", (floatVal - 5));
    printf("%s%v\n", "3.0 + -5..", (floatVal + -5));
    printf("%s%v\n", "3.0 * 5..", (floatVal * 5));
    printf("%s%v\n", "3.0 / 5..", (floatVal / 5));

    floatVal = 10.0;

    printf("%s%v\n", "1 < 3..", (1 < 3));
    printf("%s%v\n", "3 < 1..", (3 < 1));
    printf("%s%v\n", "1 <= 3..", (1 <= 3));
    printf("%s%v\n", "3 <= 1..", (3 <= 1));
    printf("%s%v\n", "1 == 1..", (1 == 1));
    printf("%s%v\n", "1 == 3..", (1 == 3));
    printf("%s%v\n", "1 != 3..", (1 != 3));
    printf("%s%v\n", "3 != 3..", (3 != 3));
    printf("%s%v\n", "1 >= 3..", (1 >= 3));
    printf("%s%v\n", "3 >= 1..", (3 >= 1));
    printf("%s%v\n", "3 > 1..", (3 > 1));
    printf("%s%v\n", "1 > 3..", (1 > 3));

    printf("%s%v\n", "1.0 < 3..", (1.0 < 3));
    printf("%s%v\n", "3 < 1.0..", (3 < 1.0));
    printf("%s%v\n", "1.0 <= 3..", (1.0 <= 3));
    printf("%s%v\n", "3 <= 1.0..", (3 <= 1.0));
    printf("%s%v\n", "1.0 == 1.0..", (1.0 == 1.0));
    printf("%s%v\n", "1.0 == 3..", (1.0 == 3));
    printf("%s%v\n", "1 != 3.0..", (1 != 3.0));
    printf("%s%v\n", "3.0 != 3.0..", (3.0 != 3.0));
    printf("%s%v\n", "3.0 >= 1..", (3.0 >= 1));
    printf("%s%v\n", "1 >= 3.0..", (1 >= 3.0));
    printf("%s%v\n", "3.0 > 1..", (3.0 > 1));
    printf("%s%v\n", "1 > 3.0..", (1 > 3.0));

    intVal = 1;

    printf("%s%v\n", "1 < 3..", (intVal < 3));
    printf("%s%v\n", "3 < 1..", (3 < intVal));
    printf("%s%v\n", "1 <= 3..", (intVal <= 3));
    printf("%s%v\n", "3 <= 1..", (3 <= intVal));
    printf("%s%v\n", "1 == 1..", (intVal == 1));
    printf("%s%v\n", "1 == 3..", (intVal == 3));
    printf("%s%v\n", "1 != 3..", (intVal != 3));
    printf("%s%v\n", "3 != 3..", (3 != (intVal*3)));
    printf("%s%v\n", "1 >= 3..", (intVal >= 3));
    printf("%s%v\n", "3 >= 1..", (3 >= intVal));
    printf("%s%v\n", "3 > 1..", (3 > intVal));
    printf("%s%v\n", "1 > 3..", (intVal > 3));

    intVal = 3;

    printf("%s%v\n", "1.0 < 3..", (1 < intVal));
    printf("%s%v\n", "3 < 1.0..", (intVal < 1.0));
    printf("%s%v\n", "1.0 <= 3..", (1 <= intVal));
    printf("%s%v\n", "3 <= 1.0..", (intVal <= 1.0));
    printf("%s%v\n", "1.0 == 1.0..", (1.0 == 1.0));
    printf("%s%v\n", "1.0 == 3..", (1 == intVal));
    printf("%s%v\n", "1.0 != 3..", (1 != intVal));
    printf("%s%v\n", "3 >= 1.0..", (intVal >= 1.0));
    printf("%s%v\n", "1.0 >= 3.0..", (1 >= intVal));
    printf("%s%v\n", "3 > 1.0..", (intVal > 1.0));
    printf("%s%v\n", "1.0 > 3..", (1 > intVal));
};

//
// Check string comparing
//
func testStringComparing() {
    if ("abc" == "abc") {
        printf("== good.\n");
    };

    if ("abc" == "cde") {
        printf("== bad.\n");
    };

    if ("abc" != "abc") {
        printf("!= bad.\n");
    };

    if ("abc" != "cde") {
        printf("!= good.\n");
    };

    if ("abc" < "abd") {
        printf("< good.\n");
    };

    if ("abc" < "abb") {
        printf("< bad.\n");
    };

    if ("abc" <= "abc") {
        printf("<= good.\n");
    };

    if ("abc" <= "abd") {
        printf("<= good.\n");
    };

    if ("abc" <= "abb") {
        printf("<= bad.\n");
    };

    if ("abc" >= "abc") {
        printf(">= good.\n");
    };

    if ("abc" >= "abb") {
        printf(">= good.\n");
    };

    if ("abc" >= "abd") {
        printf(">= bad.\n");
    };

    var strVal string;

    strVal = "abc";

    if (strVal == "abc") {
        printf("== good.\n");
    };

    if (strVal == "cde") {
        printf("== bad.\n");
    };

    if (strVal != "abc") {
        printf("!= bad.\n");
    };

    if (strVal != "cde") {
        printf("!= good.\n");
    };

    if (strVal < "abd") {
        printf("< good.\n");
    };

    if (strVal < "abb") {
        printf("< bad.\n");
    };

    if (strVal <= "abc") {
        printf("<= good.\n");
    };

    if (strVal <= "abd") {
        printf("<= good.\n");
    };

    if (strVal <= "abb") {
        printf("<= bad.\n");
    };

    if (strVal >= "abc") {
        printf(">= good.\n");
    };

    if (strVal >= "abb") {
        printf(">= good.\n");
    };

    if (strVal >= "abd") {
        printf(">= bad.\n");
    };
};

//
// Check cast
//
func testCast() {
    var intVal int = 3.0;
    printf("intVal..%v\n", intVal);

    var floatVal float = 0.0;
    printf("floatVal..%v\n", floatVal);

};

//
// Check function
//
func testFuncNoArg() {
    printf("no_arg\n");

    return;
};

func testFunc2Arg(a int, b int) {
    printf("a + b..%v\n", (a + b));
};

func testFuncLocalVal(a float) {
    var b float;
    var c float;

    b = 3;
    c = 4;

    printf("a + b + c..%v\n", (a + b + c));
};

func testFuncBool(b bool) bool {
    return b;
};

func testFuncInt(d float) int {
    return 250;
};

func testFuncFloat(i int) float {
    return 250.0;
};

func testFuncString(s string) string {
    return s;
};


func recursive(count int) {
    var a int;
    a = count;

    printf(" a..%v\n", a);
    if (count > 0) {
        recursive(count-1);
    } else {
        printf("\n");
    };
    printf(" a..%v\n", a);
};


//
// Check booln operations
//
func testBoolOperations() {
    var boolVal bool;

    boolVal = true;

    printf("boolVal..%v\n", boolVal);
    printf("!boolVal..%v\n", !boolVal);

    if (boolVal) {
        printf("true\n");
    } else {
        printf("false\n");
    };

    if (boolVal || false) {
        printf("boolVal || false\n");
    };
    if (boolVal && false) {
        printf("boolVal && false\n");
    };

    if (true == true) {
        printf("true == true good\n");
    };

    if (true == false) {
        printf("true == false bad\n");
    };

    if (true != true) {
        printf("true != true bad\n");
    };

    if (true != false) {
        printf("true != false good\n");
    };

    if (!true) {
        printf("! operator bad.\n");
    };

    if (!false) {
        printf("! operator good.\n");
    };

    var trueVal bool;
    trueVal = true;

    if (trueVal == true) {
        printf("trueVal == true good\n");
    };
    if (trueVal == false) {
        printf("trueVal == false bad\n");
    };
    if (trueVal != true) {
        printf("trueVal != true bad\n");
    };
    if (trueVal != false) {
        printf("trueVal != false good\n");
    };
    if (!trueVal) {
        printf("! operator bad.\n");
    };
    var falseVal bool;
    falseVal = false;

    if (!falseVal) {
        printf("! operator good.\n");
    };
};

//
// Check flow control
//
func testFlowControl() {
    if (true) {
        printf("true\n");
    };

    if (false) {
        printf("false\n");
    };

    if (false) {
        printf("bad\n");
    } else {
        printf("good\n");
    };

    if (false) {
        printf("bad\n");
    } else if (true) {
        printf("good\n");
    } else {
        printf("bad\n");
    };

    if (false) {
        printf("bad\n");
    } else if (false) {
        printf("bad\n");
    } else {
        printf("good\n");
    };

    var i int;

    printf("\n");
    printf("********** for statement **********\n");

    i = 0;
    for {
        printf(" i..%v\n", i);
        if (i > 5) {
            break;
        };
        i = i + 1;
    };

    printf("\n");

    for i = 0; i < 10; i = i + 1 {
        printf(" i..%v\n", i);
    };
    printf("\n");

    i = 0;

    printf("********** continue in for **********\n");
    for i = 0; i < 10; i = i + 1 {
        if (i < 5) {
            continue;
        };
        printf(" i..%v\n", i);
    };
    printf("\ni..%v\n", i);

    var j int;
    for i = 0; i < 5; i = i + 1 {
        printf("*** i..%v***\n", i);
        if (i == 0) {
            printf("i == 0\n");
        } else if (i == 1) {
            printf("i == 1\n");
        } else if (i == 2) {
            printf("i == 2\n");
        } else {
            printf("i == else\n");
        };
        if (i != 3) {
            printf("i != 3\n");
        };
        if (i == 2 || i == 3) {
            printf("i == 2 || i == 3\n");
        } else {
            printf("i != 2 && i != 3\n");
        };

        for j = 0; j < 5; j = j + 1 {
            if (i == 2 && j == 3) {
                printf("i == 2 && j == %v\n", j);
            };
        };
    };
};

//
// Check array
//
func testArray() {
    var i int;
    var array []int;
    array = nil;

    var array2 []int = []int{1, 2, 3, 4, 5.0};

    for i = 0; i < len(array2); i = i + 1 {
        printf("array2[%v].. %v\n", i, array2[i]);
    };
};

//
// Check nil
//
func testNil() {
    var emptyStr string = "";
    var strVal string = "abc";
    var arrayVal []int = []int{1, 2, 3};
    var array []int;

    printf(emptyStr);
    printf("\n");

    if (emptyStr == "") {
        printf("OK\n");
    } else {
        printf("NG\n");
    };

    if (strVal != "") {
        printf("OK\n");
    } else {
        printf("NG\n");
    };

    if (array == nil) {
        printf("NG\n");
    } else {
        printf("OK\n");
    };

    if (nil == nil) {
        printf("OK\n");
    } else {
        printf("NG\n");
    };
};

func testMultiAssign() {
    var a int;
    var b int;
    var c int;
    a, b, c = 1, 2, 3;
    printf("a is %v\n", a);
    printf("b is %v\n", b);
    printf("c is %v\n", c);
};

func testFuncMultiResult() {
    var a int;
    var b int;
    a, b = getMulti();
    printf("a is %v\n", a);
    printf("b is %v\n", b);
};

func getMulti() (int, int) {
    return 250, 250;
};

func testPackageCall() {
    utils.printTest("TODO");
};

func testNativeFuncItoa() {
    var a int = 250;
    var b string;

    b = itoa(a);

    printf(b);
};

func testPackageVariable() {
    printf("other old is %v\n", utils.other);
    utils.other = 250;
    printf("other new is %v\n", utils.other);

    utils.setOther(520);
    printf("other change is %v\n", utils.other);

    utils.printOther();
};

func testGlobalVariable() {
    var i int;
    for i = 0; i < len(globalArray); i = i + 1 {
        printf("globalArray[%v]..%v\n", i, globalArray[i]);
    };

    globalArray[0] = 0;
    globalArray[1] = 2;
    globalArray[2] = 4;
    globalArray[3] = 8;

    for i = 0; i < len(globalArray); i = i + 1 {
        printf("globalArray[%v]..%v\n", i, globalArray[i]);
    };

    for i = 0; i < len(globalArray); i = i + 1 {
        printf("utils.globalArray[%v]..%v\n", i, utils.globalArray[i]);
    };
};

func testMap() {
    var localMap map[string]int = map[string]int{"a": 1, "b": 2, "c": 3};
    printf("map a is %v\n", localMap["a"]);
    printf("map b is %v\n", localMap["b"]);

    localMap["a"] = 100;
    localMap["b"] = 200;
    localMap["c"] = 400;
    localMap["d"] = 500;

    printf("map a is %v\n", localMap["a"]);
    printf("map b is %v\n", localMap["b"]);
    printf("map c is %v\n", localMap["c"]);
    printf("map d is %v\n", localMap["d"]);
};

func testBool() {
    var a bool;

    if !a {
        printf("a is false\n");
    };

    a = true;
    if a {
        printf("a is true\n");
    };

    var boolList []bool = []bool{true, false, true, false};
    var i int;
    for i = 0; i < len(boolList); i = i + 1 {
        printf("boolList %v is %v\n", i, boolList[i]);
    };
};

func testPrintf() {
    printf("test printf %s\n", "test");
};

func testDotDotDot() {
    printf("%s\n", "Hello");
    printf("%s %s %s\n", "Hello", "World", "!");
};

func testAppend() {
    var array []int = []int{1, 2, 3, 4, 5};
    var i int;

    for i = 0; i < len(array); i = i + 1 {
        printf("array[%v] = %v\n", i, array[i]);
    };

    array = append(array, 6);

    for i = 0; i < len(array); i = i + 1 {
        printf("array[%v] = %v\n", i, array[i]);
    };

    array = append(array, 7, 8, 9, 10);

    for i = 0; i < len(array); i = i + 1 {
        printf("array[%v] = %v\n", i, array[i]);
    };
};

func main() {
    testLex();
    testOperators();
    testStringComparing();
    testCast();
    testFuncNoArg();
    testFunc2Arg(13, 15);
    testFuncLocalVal(3.0);
    printf("%s%v\n", "testFuncBool..", testFuncBool(true));
    printf("%s%v\n", "testFuncInt..", testFuncInt(3.0));
    printf("%s%v\n", "testFuncFloat..", testFuncFloat(3));
    printf("%s%v\n", "testFuncString..", testFuncString("hoge"));
    recursive(10);
    testBoolOperations();
    testFlowControl();
    testArray();
    testNil();
    testMultiAssign();
    testFuncMultiResult();
    testPackageCall();
    testNativeFuncItoa();
    testPackageVariable();
    testGlobalVariable();
    testMap();
    testBool();
    testPrintf();
    testDotDotDot();
    testAppend();
};
