package main;

import "utils";

var globalArray []int = []int{100, 200, 300, 400};
var emptyArray []int = []int{};
var emptyMap map[string]int = map[string]int{};
var globalMap map[string]int = map[string]int{"test": 1};
var globalInterface interface{} = "cool";

func println(str string) {
    print(str + "\n");
};

//
// Check lexical analyzer
//
func testLex() {
    print("Hello, World!\n\\n");
    print("gogo\n"); // comment
    // chain string
    print("gogo" + " can run ok\n");
};

//
// Check operators
//
func testOperators() {
    print("3 + 5.." + (3 + 5) + "\n");
    print("3 - 5.." + (3 - 5) + "\n");
    print("3 + -5.." + (3 + -5) + "\n");
    print("3 * 5.." + (3 * 5) + "\n");
    print("3 / 5.." + (3 / 5) + "\n");
    print("3.0 + 5.0.." + (3.0 + 5.0) + "\n");
    print("3.0 - 5.0.." + (3.0 - 5.0) + "\n");
    print("3.0 + -5.0.." + (3.0 + -5.0) + "\n");
    print("3.0 * 5.0.." + (3.0 * 5.0) + "\n");
    print("3.0 / 5.0.." + (3.0 / 5.0) + "\n");
    print("3 + 5.0.." + (3 + 5.0) + "\n");
    print("3 - 5.0.." + (3 - 5.0) + "\n");
    print("3 + -5.0.." + (3 + -5.0) + "\n");
    print("3 * 5.0.." + (3 * 5.0) + "\n");
    print("3 / 5.0.." + (3 / 5.0) + "\n");
    print("3.0 + 5.." + (3.0 + 5) + "\n");
    print("3.0 - 5.." + (3.0 - 5) + "\n");
    print("3.0 + -5.." + (3.0 + -5) + "\n");
    print("3.0 * 5.." + (3.0 * 5) + "\n");
    print("3.0 / 5.." + (3.0 / 5) + "\n");

    var intVal int;
    var floatVal float;

    intVal = 3;

    print("3 + 5.." + (intVal + 5) + "\n");
    print("3 - 5.." + (intVal - 5) + "\n");
    print("3 + -5.." + (intVal + -5) + "\n");
    print("3 * 5.." + (intVal * 5) + "\n");
    print("3 / 5.." + (intVal / 5) + "\n");

    intVal = 10;
    floatVal = 3.0;

    print("3.0 + 5.0.." + (floatVal + 5.0) + "\n");
    print("3.0 - 5.0.." + (floatVal - 5.0) + "\n");
    print("3.0 + -5.0.." + (floatVal + -5.0) + "\n");
    print("3.0 * 5.0.." + (floatVal * 5.0) + "\n");
    print("3.0 / 5.0.." + (floatVal / 5.0) + "\n");

    floatVal = 10;
    intVal = 3;

    print("3 + 5.0.." + (intVal + 5.0) + "\n");
    print("3 - 5.0.." + (intVal - 5.0) + "\n");
    print("3 + -5.0.." + (intVal + -5.0) + "\n");
    print("3 * 5.0.." + (intVal * 5.0) + "\n");
    print("3 / 5.0.." + (intVal / 5.0) + "\n");

    intVal = 10;
    floatVal = 3.0;

    print("3.0 + 5.." + (floatVal + 5) + "\n");
    print("3.0 - 5.." + (floatVal - 5) + "\n");
    print("3.0 + -5.." + (floatVal + -5) + "\n");
    print("3.0 * 5.." + (floatVal * 5) + "\n");
    print("3.0 / 5.." + (floatVal / 5) + "\n");

    floatVal = 10.0;

    print("1 < 3.." + (1 < 3) + "\n");
    print("3 < 1.." + (3 < 1) + "\n");
    print("1 <= 3.." + (1 <= 3) + "\n");
    print("3 <= 1.." + (3 <= 1) + "\n");
    print("1 == 1.." + (1 == 1) + "\n");
    print("1 == 3.." + (1 == 3) + "\n");
    print("1 != 3.." + (1 != 3) + "\n");
    print("3 != 3.." + (3 != 3) + "\n");
    print("1 >= 3.." + (1 >= 3) + "\n");
    print("3 >= 1.." + (3 >= 1) + "\n");
    print("3 > 1.." + (3 > 1) + "\n");
    print("1 > 3.." + (1 > 3) + "\n");

    print("1.0 < 3.." + (1.0 < 3) + "\n");
    print("3 < 1.0.." + (3 < 1.0) + "\n");
    print("1.0 <= 3.." + (1.0 <= 3) + "\n");
    print("3 <= 1.0.." + (3 <= 1.0) + "\n");
    print("1.0 == 1.0.." + (1.0 == 1.0) + "\n");
    print("1.0 == 3.." + (1.0 == 3) + "\n");
    print("1 != 3.0.." + (1 != 3.0) + "\n");
    print("3.0 != 3.0.." + (3.0 != 3.0) + "\n");
    print("3.0 >= 1.." + (3.0 >= 1) + "\n");
    print("1 >= 3.0.." + (1 >= 3.0) + "\n");
    print("3.0 > 1.." + (3.0 > 1) + "\n");
    print("1 > 3.0.." + (1 > 3.0) + "\n");

    intVal = 1;

    print("1 < 3.." + (intVal < 3) + "\n");
    print("3 < 1.." + (3 < intVal) + "\n");
    print("1 <= 3.." + (intVal <= 3) + "\n");
    print("3 <= 1.." + (3 <= intVal) + "\n");
    print("1 == 1.." + (intVal == 1) + "\n");
    print("1 == 3.." + (intVal == 3) + "\n");
    print("1 != 3.." + (intVal != 3) + "\n");
    print("3 != 3.." + (3 != (intVal*3)) + "\n");
    print("1 >= 3.." + (intVal >= 3) + "\n");
    print("3 >= 1.." + (3 >= intVal) + "\n");
    print("3 > 1.." + (3 > intVal) + "\n");
    print("1 > 3.." + (intVal > 3) + "\n");

    intVal = 3;

    print("1.0 < 3.." + (1.0 < intVal) + "\n");
    print("3 < 1.0.." + (intVal < 1.0) + "\n");
    print("1.0 <= 3.." + (1.0 <= intVal) + "\n");
    print("3 <= 1.0.." + (intVal <= 1.0) + "\n");
    print("1.0 == 1.0.." + (1.0 == 1.0) + "\n");
    print("1.0 == 3.." + (1.0 == intVal) + "\n");
    print("1.0 != 3.." + (1.0 != intVal) + "\n");
    print("3 >= 1.0.." + (intVal >= 1.0) + "\n");
    print("1.0 >= 3.0.." + (1.0 >= intVal) + "\n");
    print("3 > 1.0.." + (intVal > 1.0) + "\n");
    print("1.0 > 3.." + (1.0 > intVal) + "\n");
};

//
// Check string comparing
//
func testStringComparing() {
    if ("abc" == "abc") {
        print("== good.\n");
    };

    if ("abc" == "cde") {
        print("== bad.\n");
    };

    if ("abc" != "abc") {
        print("!= bad.\n");
    };

    if ("abc" != "cde") {
        print("!= good.\n");
    };

    if ("abc" < "abd") {
        print("< good.\n");
    };

    if ("abc" < "abb") {
        print("< bad.\n");
    };

    if ("abc" <= "abc") {
        print("<= good.\n");
    };

    if ("abc" <= "abd") {
        print("<= good.\n");
    };

    if ("abc" <= "abb") {
        print("<= bad.\n");
    };

    if ("abc" >= "abc") {
        print(">= good.\n");
    };

    if ("abc" >= "abb") {
        print(">= good.\n");
    };

    if ("abc" >= "abd") {
        print(">= bad.\n");
    };

    var strVal string;

    strVal = "abc";

    if (strVal == "abc") {
        print("== good.\n");
    };

    if (strVal == "cde") {
        print("== bad.\n");
    };

    if (strVal != "abc") {
        print("!= bad.\n");
    };

    if (strVal != "cde") {
        print("!= good.\n");
    };

    if (strVal < "abd") {
        print("< good.\n");
    };

    if (strVal < "abb") {
        print("< bad.\n");
    };

    if (strVal <= "abc") {
        print("<= good.\n");
    };

    if (strVal <= "abd") {
        print("<= good.\n");
    };

    if (strVal <= "abb") {
        print("<= bad.\n");
    };

    if (strVal >= "abc") {
        print(">= good.\n");
    };

    if (strVal >= "abb") {
        print(">= good.\n");
    };

    if (strVal >= "abd") {
        print(">= bad.\n");
    };
};

//
// Check cast
//
func testCast() {
    var intVal int = 3.0;
    print("intVal.." + intVal + "\n");

    var floatVal float = 0.0;
    print("floatVal.." + floatVal + "\n");

};

//
// Check function
//
func testFuncNoArg() {
    print("no_arg\n");

    return;
};

func testFunc2Arg(a int, b int) {
    print("a + b.." + (a + b) + "\n");
};

func testFuncLocalVal(a float) {
    var b int;
    var c float;

    b = 3;
    c = 4.0;

    print("a + b + c.." + (a + b + c) + "\n");
};

func testFuncBool(b bool) bool {
    return b;
};

func testFuncInt(d float) int {
    return 250;
};

func testFuncFloat(i int) float {
    return 250.0;
};

func testFuncString(s string) string {
    return s;
};


func recursive(count int) {
    var a int;
    a = count;

    print(" a.." + a);
    if (count > 0) {
        recursive(count-1);
    } else {
        print("\n");
    };
    print(" a.." + a);
};


//
// Check booln operations
//
func testBoolOperations() {
    var boolVal bool;

    boolVal = true;

    print("boolVal.." + boolVal + "\n");
    print("!boolVal.." + !boolVal + "\n");

    if (boolVal) {
        print("true\n");
    } else {
        print("false\n");
    };

    if (boolVal || false) {
        print("boolVal || false\n");
    };
    if (boolVal && false) {
        print("boolVal && false\n");
    };

    if (true == true) {
        print("true == true good\n");
    };

    if (true == false) {
        print("true == false bad\n");
    };

    if (true != true) {
        print("true != true bad\n");
    };

    if (true != false) {
        print("true != false good\n");
    };

    if (!true) {
        print("! operator bad.\n");
    };

    if (!false) {
        print("! operator good.\n");
    };

    var trueVal bool;
    trueVal = true;

    if (trueVal == true) {
        print("trueVal == true good\n");
    };
    if (trueVal == false) {
        print("trueVal == false bad\n");
    };
    if (trueVal != true) {
        print("trueVal != true bad\n");
    };
    if (trueVal != false) {
        print("trueVal != false good\n");
    };
    if (!trueVal) {
        print("! operator bad.\n");
    };
    var falseVal bool;
    falseVal = false;

    if (!falseVal) {
        print("! operator good.\n");
    };
};

//
// Check flow control
//
func testFlowControl() {
    if (true) {
        print("true\n");
    };

    if (false) {
        print("false\n");
    };

    if (false) {
        print("bad\n");
    } else {
        print("good\n");
    };

    if (false) {
        print("bad\n");
    } else if (true) {
        print("good\n");
    } else {
        print("bad\n");
    };

    if (false) {
        print("bad\n");
    } else if (false) {
        print("bad\n");
    } else {
        print("good\n");
    };

    var i int;

    print("\n");
    println("********** for statement **********");

    i = 0;
    for {
        print(" i.." + i);
        if (i > 5) {
            break;
        };
        i = i + 1;
    };

    print("\n");

    for i = 0; i < 10; i = i + 1 {
        print(" i.." + i);
    };
    print("\n");

    i = 0;

    println("********** continue in for **********");
    for i = 0; i < 10; i = i + 1 {
        if (i < 5) {
            continue;
        };
        print(" i.." + i);
    };
    println("\ni.." + i);

    var j int;
    for i = 0; i < 5; i = i + 1 {
        print("*** i.." + i + "***\n");
        if (i == 0) {
            print("i == 0\n");
        } else if (i == 1) {
            print("i == 1\n");
        } else if (i == 2) {
            print("i == 2\n");
        } else {
            print("i == else\n");
        };
        if (i != 3) {
            print("i != 3\n");
        };
        if (i == 2 || i == 3) {
            print("i == 2 || i == 3\n");
        } else {
            print("i != 2 && i != 3\n");
        };

        for j = 0; j < 5; j = j + 1 {
            if (i == 2 && j == 3) {
                print("i == 2 && j == " + j + "\n");
            };
        };
    };
};

//
// Check array
//
func testArray() {
    var i int;
    var array []int;
    array = nil;

    var array2 []int = []int{1, 2, 3, 4, 5.0};

    for i = 0; i < 5; i = i + 1 {
        print("array2[" + i + "].." + array2[i] + "\n");
    };
};

//
// Check nil
//
func testNil() {
    var emptyStr string = "";
    var strVal string = "abc";
    var arrayVal []int = []int{1, 2, 3};
    var array []int;

    print(emptyStr);
    print("\n");

    if (emptyStr == "") {
        print("OK\n");
    } else {
        print("NG\n");
    };

    if (strVal != "") {
        print("OK\n");
    } else {
        print("NG\n");
    };

    if (array == nil) {
        print("NG\n");
    } else {
        print("OK\n");
    };

    if (nil == nil) {
        print("OK\n");
    } else {
        print("NG\n");
    };
};

func testMultiAssign() {
    var a int;
    var b int;
    var c int;
    a, b, c = 1, 2, 3;
    print("a is " + a + "\n");
    print("b is " + b + "\n");
    print("c is " + c + "\n");
};

func testFuncMultiResult() {
    var a int;
    var b int;
    a, b = getMulti();
    print("a is " + a + "\n");
    print("b is " + b + "\n");
};

func getMulti() (int, int) {
    return 250, 250;
};

func testPackageCall() {
    utils.printTest("TODO");
};

func testNativeFuncItoa() {
    var a int = 250;
    var b string;

    b = itoa(a);

    print(b);
};

func testPackageVariable() {
    print("other old is " + utils.other);
    utils.other = 250;
    print("other new is " + utils.other);

    utils.setOther(520);
    print("other change is " + utils.other);

    utils.printOther();
};

func testGlobalVariable() {
    var i int;
    for i = 0; i < 4; i = i + 1 {
        print("globalArray[" + i + "].." + globalArray[i] + "\n");
    };

    globalArray[0] = 0;
    globalArray[1] = 2;
    globalArray[2] = 4;
    globalArray[3] = 8;

    for i = 0; i < 4; i = i + 1 {
        print("globalArray[" + i + "].." + globalArray[i] + "\n");
    };

    for i = 0; i < 4; i = i + 1 {
        print("utils.globalArray[" + i + "].." + utils.globalArray[i] + "\n");
    };
};

func testMap() {
    var localMap map[string]int = map[string]int{"a": 1, "b": 2, "c": 3};
    print("map a is " + localMap["a"] + "\n");
    print("map b is " + localMap["b"] + "\n");

    localMap["a"] = 100;
    localMap["b"] = 200;
    localMap["c"] = 400;
    localMap["d"] = 500;

    print("map a is " + localMap["a"] + "\n");
    print("map b is " + localMap["b"] + "\n");
    print("map c is " + localMap["c"] + "\n");
    print("map d is " + localMap["d"] + "\n");
};

func testBool() {
    var a bool;

    if !a {
        print("a is false\n");
    };

    a = true;
    if a {
        print("a is true\n");
    };

    var boolList []bool = []bool{true, false, true, false};
    var i int;
    for i = 0; i < 4; i = i + 1 {
        print("boolList " + i + " is " + boolList[i] + "\n");
    };
};

func testPrintf() {
    printf("test printf %s\n", []interface{}{"test"});
};

func main() {
    testLex();
    testOperators();
    testStringComparing();
    testCast();
    testFuncNoArg();
    testFunc2Arg(13, 15);
    testFuncLocalVal(3.0);
    println("testFuncBool.." + testFuncBool(true));
    println("testFuncInt.." + testFuncInt(3.0));
    println("testFuncFloat.." + testFuncFloat(3));
    println("testFuncString.." + testFuncString("hoge"));
    recursive(10);
    testBoolOperations();
    testFlowControl();
    testArray();
    testNil();
    testMultiAssign();
    testFuncMultiResult();
    testPackageCall();
    testNativeFuncItoa();
    testPackageVariable();
    testGlobalVariable();
    testMap();
    testBool();
    testPrintf();
};
